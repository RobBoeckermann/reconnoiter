// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/trace/v1/trace_config.proto

#include "opentelemetry/proto/trace/v1/trace_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opentelemetry {
namespace proto {
namespace trace {
namespace v1 {
constexpr TraceConfig::TraceConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_number_of_attributes_(int64_t{0})
  , max_number_of_timed_events_(int64_t{0})
  , max_number_of_attributes_per_timed_event_(int64_t{0})
  , max_number_of_links_(int64_t{0})
  , max_number_of_attributes_per_link_(int64_t{0})
  , _oneof_case_{}{}
struct TraceConfigDefaultTypeInternal {
  constexpr TraceConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TraceConfigDefaultTypeInternal() {}
  union {
    TraceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TraceConfigDefaultTypeInternal _TraceConfig_default_instance_;
constexpr ConstantSampler::ConstantSampler(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : decision_(0)
{}
struct ConstantSamplerDefaultTypeInternal {
  constexpr ConstantSamplerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConstantSamplerDefaultTypeInternal() {}
  union {
    ConstantSampler _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConstantSamplerDefaultTypeInternal _ConstantSampler_default_instance_;
constexpr TraceIdRatioBased::TraceIdRatioBased(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : samplingratio_(0){}
struct TraceIdRatioBasedDefaultTypeInternal {
  constexpr TraceIdRatioBasedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TraceIdRatioBasedDefaultTypeInternal() {}
  union {
    TraceIdRatioBased _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TraceIdRatioBasedDefaultTypeInternal _TraceIdRatioBased_default_instance_;
constexpr RateLimitingSampler::RateLimitingSampler(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : qps_(int64_t{0}){}
struct RateLimitingSamplerDefaultTypeInternal {
  constexpr RateLimitingSamplerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RateLimitingSamplerDefaultTypeInternal() {}
  union {
    RateLimitingSampler _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RateLimitingSamplerDefaultTypeInternal _RateLimitingSampler_default_instance_;
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opentelemetry
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::TraceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::TraceConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::TraceConfig, max_number_of_attributes_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::TraceConfig, max_number_of_timed_events_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::TraceConfig, max_number_of_attributes_per_timed_event_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::TraceConfig, max_number_of_links_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::TraceConfig, max_number_of_attributes_per_link_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::TraceConfig, sampler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ConstantSampler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ConstantSampler, decision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::TraceIdRatioBased, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::TraceIdRatioBased, samplingratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::RateLimitingSampler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::RateLimitingSampler, qps_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opentelemetry::proto::trace::v1::TraceConfig)},
  { 15, -1, -1, sizeof(::opentelemetry::proto::trace::v1::ConstantSampler)},
  { 22, -1, -1, sizeof(::opentelemetry::proto::trace::v1::TraceIdRatioBased)},
  { 29, -1, -1, sizeof(::opentelemetry::proto::trace::v1::RateLimitingSampler)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::trace::v1::_TraceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::trace::v1::_ConstantSampler_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::trace::v1::_TraceIdRatioBased_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::trace::v1::_RateLimitingSampler_default_instance_),
};

const char descriptor_table_protodef_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/opentelemetry/proto/trace/v1/trace_con"
  "fig.proto\022\034opentelemetry.proto.trace.v1\""
  "\310\003\n\013TraceConfig\022I\n\020constant_sampler\030\001 \001("
  "\0132-.opentelemetry.proto.trace.v1.Constan"
  "tSamplerH\000\022O\n\024trace_id_ratio_based\030\002 \001(\013"
  "2/.opentelemetry.proto.trace.v1.TraceIdR"
  "atioBasedH\000\022R\n\025rate_limiting_sampler\030\003 \001"
  "(\01321.opentelemetry.proto.trace.v1.RateLi"
  "mitingSamplerH\000\022 \n\030max_number_of_attribu"
  "tes\030\004 \001(\003\022\"\n\032max_number_of_timed_events\030"
  "\005 \001(\003\0220\n(max_number_of_attributes_per_ti"
  "med_event\030\006 \001(\003\022\033\n\023max_number_of_links\030\007"
  " \001(\003\022)\n!max_number_of_attributes_per_lin"
  "k\030\010 \001(\003B\t\n\007sampler\"\251\001\n\017ConstantSampler\022P"
  "\n\010decision\030\001 \001(\0162>.opentelemetry.proto.t"
  "race.v1.ConstantSampler.ConstantDecision"
  "\"D\n\020ConstantDecision\022\016\n\nALWAYS_OFF\020\000\022\r\n\t"
  "ALWAYS_ON\020\001\022\021\n\rALWAYS_PARENT\020\002\"*\n\021TraceI"
  "dRatioBased\022\025\n\rsamplingRatio\030\001 \001(\001\"\"\n\023Ra"
  "teLimitingSampler\022\013\n\003qps\030\001 \001(\003Bh\n\037io.ope"
  "ntelemetry.proto.trace.v1B\020TraceConfigPr"
  "otoP\001Z1go.opentelemetry.io/proto/otlp/co"
  "llector/trace/v1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto = {
  false, false, 904, descriptor_table_protodef_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto, "opentelemetry/proto/trace/v1/trace_config.proto", 
  &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto::offsets,
  file_level_metadata_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto, file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto, file_level_service_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto_getter() {
  return &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto(&descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto);
namespace opentelemetry {
namespace proto {
namespace trace {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConstantSampler_ConstantDecision_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[0];
}
bool ConstantSampler_ConstantDecision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ConstantSampler_ConstantDecision ConstantSampler::ALWAYS_OFF;
constexpr ConstantSampler_ConstantDecision ConstantSampler::ALWAYS_ON;
constexpr ConstantSampler_ConstantDecision ConstantSampler::ALWAYS_PARENT;
constexpr ConstantSampler_ConstantDecision ConstantSampler::ConstantDecision_MIN;
constexpr ConstantSampler_ConstantDecision ConstantSampler::ConstantDecision_MAX;
constexpr int ConstantSampler::ConstantDecision_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TraceConfig::_Internal {
 public:
  static const ::opentelemetry::proto::trace::v1::ConstantSampler& constant_sampler(const TraceConfig* msg);
  static const ::opentelemetry::proto::trace::v1::TraceIdRatioBased& trace_id_ratio_based(const TraceConfig* msg);
  static const ::opentelemetry::proto::trace::v1::RateLimitingSampler& rate_limiting_sampler(const TraceConfig* msg);
};

const ::opentelemetry::proto::trace::v1::ConstantSampler&
TraceConfig::_Internal::constant_sampler(const TraceConfig* msg) {
  return *msg->sampler_.constant_sampler_;
}
const ::opentelemetry::proto::trace::v1::TraceIdRatioBased&
TraceConfig::_Internal::trace_id_ratio_based(const TraceConfig* msg) {
  return *msg->sampler_.trace_id_ratio_based_;
}
const ::opentelemetry::proto::trace::v1::RateLimitingSampler&
TraceConfig::_Internal::rate_limiting_sampler(const TraceConfig* msg) {
  return *msg->sampler_.rate_limiting_sampler_;
}
void TraceConfig::set_allocated_constant_sampler(::opentelemetry::proto::trace::v1::ConstantSampler* constant_sampler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sampler();
  if (constant_sampler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opentelemetry::proto::trace::v1::ConstantSampler>::GetOwningArena(constant_sampler);
    if (message_arena != submessage_arena) {
      constant_sampler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constant_sampler, submessage_arena);
    }
    set_has_constant_sampler();
    sampler_.constant_sampler_ = constant_sampler;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.TraceConfig.constant_sampler)
}
void TraceConfig::set_allocated_trace_id_ratio_based(::opentelemetry::proto::trace::v1::TraceIdRatioBased* trace_id_ratio_based) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sampler();
  if (trace_id_ratio_based) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opentelemetry::proto::trace::v1::TraceIdRatioBased>::GetOwningArena(trace_id_ratio_based);
    if (message_arena != submessage_arena) {
      trace_id_ratio_based = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_id_ratio_based, submessage_arena);
    }
    set_has_trace_id_ratio_based();
    sampler_.trace_id_ratio_based_ = trace_id_ratio_based;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.TraceConfig.trace_id_ratio_based)
}
void TraceConfig::set_allocated_rate_limiting_sampler(::opentelemetry::proto::trace::v1::RateLimitingSampler* rate_limiting_sampler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sampler();
  if (rate_limiting_sampler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::opentelemetry::proto::trace::v1::RateLimitingSampler>::GetOwningArena(rate_limiting_sampler);
    if (message_arena != submessage_arena) {
      rate_limiting_sampler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rate_limiting_sampler, submessage_arena);
    }
    set_has_rate_limiting_sampler();
    sampler_.rate_limiting_sampler_ = rate_limiting_sampler;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.TraceConfig.rate_limiting_sampler)
}
TraceConfig::TraceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.TraceConfig)
}
TraceConfig::TraceConfig(const TraceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_number_of_attributes_, &from.max_number_of_attributes_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_attributes_per_link_) -
    reinterpret_cast<char*>(&max_number_of_attributes_)) + sizeof(max_number_of_attributes_per_link_));
  clear_has_sampler();
  switch (from.sampler_case()) {
    case kConstantSampler: {
      _internal_mutable_constant_sampler()->::opentelemetry::proto::trace::v1::ConstantSampler::MergeFrom(from._internal_constant_sampler());
      break;
    }
    case kTraceIdRatioBased: {
      _internal_mutable_trace_id_ratio_based()->::opentelemetry::proto::trace::v1::TraceIdRatioBased::MergeFrom(from._internal_trace_id_ratio_based());
      break;
    }
    case kRateLimitingSampler: {
      _internal_mutable_rate_limiting_sampler()->::opentelemetry::proto::trace::v1::RateLimitingSampler::MergeFrom(from._internal_rate_limiting_sampler());
      break;
    }
    case SAMPLER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.TraceConfig)
}

inline void TraceConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_number_of_attributes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_attributes_per_link_) -
    reinterpret_cast<char*>(&max_number_of_attributes_)) + sizeof(max_number_of_attributes_per_link_));
clear_has_sampler();
}

TraceConfig::~TraceConfig() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.TraceConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TraceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sampler()) {
    clear_sampler();
  }
}

void TraceConfig::ArenaDtor(void* object) {
  TraceConfig* _this = reinterpret_cast< TraceConfig* >(object);
  (void)_this;
}
void TraceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TraceConfig::clear_sampler() {
// @@protoc_insertion_point(one_of_clear_start:opentelemetry.proto.trace.v1.TraceConfig)
  switch (sampler_case()) {
    case kConstantSampler: {
      if (GetArenaForAllocation() == nullptr) {
        delete sampler_.constant_sampler_;
      }
      break;
    }
    case kTraceIdRatioBased: {
      if (GetArenaForAllocation() == nullptr) {
        delete sampler_.trace_id_ratio_based_;
      }
      break;
    }
    case kRateLimitingSampler: {
      if (GetArenaForAllocation() == nullptr) {
        delete sampler_.rate_limiting_sampler_;
      }
      break;
    }
    case SAMPLER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SAMPLER_NOT_SET;
}


void TraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.TraceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_number_of_attributes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_number_of_attributes_per_link_) -
      reinterpret_cast<char*>(&max_number_of_attributes_)) + sizeof(max_number_of_attributes_per_link_));
  clear_sampler();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opentelemetry.proto.trace.v1.ConstantSampler constant_sampler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_constant_sampler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opentelemetry.proto.trace.v1.TraceIdRatioBased trace_id_ratio_based = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_id_ratio_based(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .opentelemetry.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rate_limiting_sampler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_number_of_attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          max_number_of_attributes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_number_of_timed_events = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          max_number_of_timed_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_number_of_attributes_per_timed_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          max_number_of_attributes_per_timed_event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_number_of_links = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          max_number_of_links_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_number_of_attributes_per_link = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          max_number_of_attributes_per_link_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.TraceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.trace.v1.ConstantSampler constant_sampler = 1;
  if (_internal_has_constant_sampler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::constant_sampler(this), target, stream);
  }

  // .opentelemetry.proto.trace.v1.TraceIdRatioBased trace_id_ratio_based = 2;
  if (_internal_has_trace_id_ratio_based()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trace_id_ratio_based(this), target, stream);
  }

  // .opentelemetry.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;
  if (_internal_has_rate_limiting_sampler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rate_limiting_sampler(this), target, stream);
  }

  // int64 max_number_of_attributes = 4;
  if (this->_internal_max_number_of_attributes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_max_number_of_attributes(), target);
  }

  // int64 max_number_of_timed_events = 5;
  if (this->_internal_max_number_of_timed_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_max_number_of_timed_events(), target);
  }

  // int64 max_number_of_attributes_per_timed_event = 6;
  if (this->_internal_max_number_of_attributes_per_timed_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_max_number_of_attributes_per_timed_event(), target);
  }

  // int64 max_number_of_links = 7;
  if (this->_internal_max_number_of_links() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_max_number_of_links(), target);
  }

  // int64 max_number_of_attributes_per_link = 8;
  if (this->_internal_max_number_of_attributes_per_link() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_max_number_of_attributes_per_link(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.TraceConfig)
  return target;
}

size_t TraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.TraceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_number_of_attributes = 4;
  if (this->_internal_max_number_of_attributes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_number_of_attributes());
  }

  // int64 max_number_of_timed_events = 5;
  if (this->_internal_max_number_of_timed_events() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_number_of_timed_events());
  }

  // int64 max_number_of_attributes_per_timed_event = 6;
  if (this->_internal_max_number_of_attributes_per_timed_event() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_number_of_attributes_per_timed_event());
  }

  // int64 max_number_of_links = 7;
  if (this->_internal_max_number_of_links() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_number_of_links());
  }

  // int64 max_number_of_attributes_per_link = 8;
  if (this->_internal_max_number_of_attributes_per_link() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_number_of_attributes_per_link());
  }

  switch (sampler_case()) {
    // .opentelemetry.proto.trace.v1.ConstantSampler constant_sampler = 1;
    case kConstantSampler: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sampler_.constant_sampler_);
      break;
    }
    // .opentelemetry.proto.trace.v1.TraceIdRatioBased trace_id_ratio_based = 2;
    case kTraceIdRatioBased: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sampler_.trace_id_ratio_based_);
      break;
    }
    // .opentelemetry.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;
    case kRateLimitingSampler: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sampler_.rate_limiting_sampler_);
      break;
    }
    case SAMPLER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TraceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig::GetClassData() const { return &_class_data_; }

void TraceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TraceConfig *>(to)->MergeFrom(
      static_cast<const TraceConfig &>(from));
}


void TraceConfig::MergeFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.TraceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_number_of_attributes() != 0) {
    _internal_set_max_number_of_attributes(from._internal_max_number_of_attributes());
  }
  if (from._internal_max_number_of_timed_events() != 0) {
    _internal_set_max_number_of_timed_events(from._internal_max_number_of_timed_events());
  }
  if (from._internal_max_number_of_attributes_per_timed_event() != 0) {
    _internal_set_max_number_of_attributes_per_timed_event(from._internal_max_number_of_attributes_per_timed_event());
  }
  if (from._internal_max_number_of_links() != 0) {
    _internal_set_max_number_of_links(from._internal_max_number_of_links());
  }
  if (from._internal_max_number_of_attributes_per_link() != 0) {
    _internal_set_max_number_of_attributes_per_link(from._internal_max_number_of_attributes_per_link());
  }
  switch (from.sampler_case()) {
    case kConstantSampler: {
      _internal_mutable_constant_sampler()->::opentelemetry::proto::trace::v1::ConstantSampler::MergeFrom(from._internal_constant_sampler());
      break;
    }
    case kTraceIdRatioBased: {
      _internal_mutable_trace_id_ratio_based()->::opentelemetry::proto::trace::v1::TraceIdRatioBased::MergeFrom(from._internal_trace_id_ratio_based());
      break;
    }
    case kRateLimitingSampler: {
      _internal_mutable_rate_limiting_sampler()->::opentelemetry::proto::trace::v1::RateLimitingSampler::MergeFrom(from._internal_rate_limiting_sampler());
      break;
    }
    case SAMPLER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig::CopyFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.TraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig::IsInitialized() const {
  return true;
}

void TraceConfig::InternalSwap(TraceConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig, max_number_of_attributes_per_link_)
      + sizeof(TraceConfig::max_number_of_attributes_per_link_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig, max_number_of_attributes_)>(
          reinterpret_cast<char*>(&max_number_of_attributes_),
          reinterpret_cast<char*>(&other->max_number_of_attributes_));
  swap(sampler_, other->sampler_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[0]);
}

// ===================================================================

class ConstantSampler::_Internal {
 public:
};

ConstantSampler::ConstantSampler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.ConstantSampler)
}
ConstantSampler::ConstantSampler(const ConstantSampler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  decision_ = from.decision_;
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.ConstantSampler)
}

inline void ConstantSampler::SharedCtor() {
decision_ = 0;
}

ConstantSampler::~ConstantSampler() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.ConstantSampler)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConstantSampler::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConstantSampler::ArenaDtor(void* object) {
  ConstantSampler* _this = reinterpret_cast< ConstantSampler* >(object);
  (void)_this;
}
void ConstantSampler::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConstantSampler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConstantSampler::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.ConstantSampler)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decision_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConstantSampler::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .opentelemetry.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_decision(static_cast<::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConstantSampler::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.ConstantSampler)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;
  if (this->_internal_decision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_decision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.ConstantSampler)
  return target;
}

size_t ConstantSampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.ConstantSampler)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .opentelemetry.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;
  if (this->_internal_decision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_decision());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConstantSampler::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConstantSampler::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConstantSampler::GetClassData() const { return &_class_data_; }

void ConstantSampler::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConstantSampler *>(to)->MergeFrom(
      static_cast<const ConstantSampler &>(from));
}


void ConstantSampler::MergeFrom(const ConstantSampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.ConstantSampler)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_decision() != 0) {
    _internal_set_decision(from._internal_decision());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConstantSampler::CopyFrom(const ConstantSampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.ConstantSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantSampler::IsInitialized() const {
  return true;
}

void ConstantSampler::InternalSwap(ConstantSampler* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(decision_, other->decision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstantSampler::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[1]);
}

// ===================================================================

class TraceIdRatioBased::_Internal {
 public:
};

TraceIdRatioBased::TraceIdRatioBased(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.TraceIdRatioBased)
}
TraceIdRatioBased::TraceIdRatioBased(const TraceIdRatioBased& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  samplingratio_ = from.samplingratio_;
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.TraceIdRatioBased)
}

inline void TraceIdRatioBased::SharedCtor() {
samplingratio_ = 0;
}

TraceIdRatioBased::~TraceIdRatioBased() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.TraceIdRatioBased)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TraceIdRatioBased::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TraceIdRatioBased::ArenaDtor(void* object) {
  TraceIdRatioBased* _this = reinterpret_cast< TraceIdRatioBased* >(object);
  (void)_this;
}
void TraceIdRatioBased::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceIdRatioBased::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TraceIdRatioBased::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.TraceIdRatioBased)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samplingratio_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceIdRatioBased::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double samplingRatio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          samplingratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceIdRatioBased::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.TraceIdRatioBased)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double samplingRatio = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_samplingratio = this->_internal_samplingratio();
  uint64_t raw_samplingratio;
  memcpy(&raw_samplingratio, &tmp_samplingratio, sizeof(tmp_samplingratio));
  if (raw_samplingratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_samplingratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.TraceIdRatioBased)
  return target;
}

size_t TraceIdRatioBased::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.TraceIdRatioBased)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double samplingRatio = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_samplingratio = this->_internal_samplingratio();
  uint64_t raw_samplingratio;
  memcpy(&raw_samplingratio, &tmp_samplingratio, sizeof(tmp_samplingratio));
  if (raw_samplingratio != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceIdRatioBased::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TraceIdRatioBased::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceIdRatioBased::GetClassData() const { return &_class_data_; }

void TraceIdRatioBased::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TraceIdRatioBased *>(to)->MergeFrom(
      static_cast<const TraceIdRatioBased &>(from));
}


void TraceIdRatioBased::MergeFrom(const TraceIdRatioBased& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.TraceIdRatioBased)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_samplingratio = from._internal_samplingratio();
  uint64_t raw_samplingratio;
  memcpy(&raw_samplingratio, &tmp_samplingratio, sizeof(tmp_samplingratio));
  if (raw_samplingratio != 0) {
    _internal_set_samplingratio(from._internal_samplingratio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceIdRatioBased::CopyFrom(const TraceIdRatioBased& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.TraceIdRatioBased)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceIdRatioBased::IsInitialized() const {
  return true;
}

void TraceIdRatioBased::InternalSwap(TraceIdRatioBased* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(samplingratio_, other->samplingratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceIdRatioBased::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[2]);
}

// ===================================================================

class RateLimitingSampler::_Internal {
 public:
};

RateLimitingSampler::RateLimitingSampler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.RateLimitingSampler)
}
RateLimitingSampler::RateLimitingSampler(const RateLimitingSampler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  qps_ = from.qps_;
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.RateLimitingSampler)
}

inline void RateLimitingSampler::SharedCtor() {
qps_ = int64_t{0};
}

RateLimitingSampler::~RateLimitingSampler() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.RateLimitingSampler)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RateLimitingSampler::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RateLimitingSampler::ArenaDtor(void* object) {
  RateLimitingSampler* _this = reinterpret_cast< RateLimitingSampler* >(object);
  (void)_this;
}
void RateLimitingSampler::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RateLimitingSampler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RateLimitingSampler::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.RateLimitingSampler)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qps_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RateLimitingSampler::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 qps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          qps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RateLimitingSampler::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.RateLimitingSampler)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 qps = 1;
  if (this->_internal_qps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_qps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.RateLimitingSampler)
  return target;
}

size_t RateLimitingSampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.RateLimitingSampler)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 qps = 1;
  if (this->_internal_qps() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_qps());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RateLimitingSampler::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RateLimitingSampler::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RateLimitingSampler::GetClassData() const { return &_class_data_; }

void RateLimitingSampler::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RateLimitingSampler *>(to)->MergeFrom(
      static_cast<const RateLimitingSampler &>(from));
}


void RateLimitingSampler::MergeFrom(const RateLimitingSampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.RateLimitingSampler)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_qps() != 0) {
    _internal_set_qps(from._internal_qps());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RateLimitingSampler::CopyFrom(const RateLimitingSampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.RateLimitingSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimitingSampler::IsInitialized() const {
  return true;
}

void RateLimitingSampler::InternalSwap(RateLimitingSampler* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(qps_, other->qps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RateLimitingSampler::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::trace::v1::TraceConfig* Arena::CreateMaybeMessage< ::opentelemetry::proto::trace::v1::TraceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::trace::v1::TraceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::trace::v1::ConstantSampler* Arena::CreateMaybeMessage< ::opentelemetry::proto::trace::v1::ConstantSampler >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::trace::v1::ConstantSampler >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::trace::v1::TraceIdRatioBased* Arena::CreateMaybeMessage< ::opentelemetry::proto::trace::v1::TraceIdRatioBased >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::trace::v1::TraceIdRatioBased >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::trace::v1::RateLimitingSampler* Arena::CreateMaybeMessage< ::opentelemetry::proto::trace::v1::RateLimitingSampler >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::trace::v1::RateLimitingSampler >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
