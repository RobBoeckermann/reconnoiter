// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/trace/v1/trace_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
namespace opentelemetry {
namespace proto {
namespace trace {
namespace v1 {
class ConstantSampler;
struct ConstantSamplerDefaultTypeInternal;
extern ConstantSamplerDefaultTypeInternal _ConstantSampler_default_instance_;
class RateLimitingSampler;
struct RateLimitingSamplerDefaultTypeInternal;
extern RateLimitingSamplerDefaultTypeInternal _RateLimitingSampler_default_instance_;
class TraceConfig;
struct TraceConfigDefaultTypeInternal;
extern TraceConfigDefaultTypeInternal _TraceConfig_default_instance_;
class TraceIdRatioBased;
struct TraceIdRatioBasedDefaultTypeInternal;
extern TraceIdRatioBasedDefaultTypeInternal _TraceIdRatioBased_default_instance_;
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> ::opentelemetry::proto::trace::v1::ConstantSampler* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::ConstantSampler>(Arena*);
template<> ::opentelemetry::proto::trace::v1::RateLimitingSampler* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::RateLimitingSampler>(Arena*);
template<> ::opentelemetry::proto::trace::v1::TraceConfig* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::TraceConfig>(Arena*);
template<> ::opentelemetry::proto::trace::v1::TraceIdRatioBased* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::TraceIdRatioBased>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentelemetry {
namespace proto {
namespace trace {
namespace v1 {

enum ConstantSampler_ConstantDecision : int {
  ConstantSampler_ConstantDecision_ALWAYS_OFF = 0,
  ConstantSampler_ConstantDecision_ALWAYS_ON = 1,
  ConstantSampler_ConstantDecision_ALWAYS_PARENT = 2,
  ConstantSampler_ConstantDecision_ConstantSampler_ConstantDecision_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConstantSampler_ConstantDecision_ConstantSampler_ConstantDecision_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConstantSampler_ConstantDecision_IsValid(int value);
constexpr ConstantSampler_ConstantDecision ConstantSampler_ConstantDecision_ConstantDecision_MIN = ConstantSampler_ConstantDecision_ALWAYS_OFF;
constexpr ConstantSampler_ConstantDecision ConstantSampler_ConstantDecision_ConstantDecision_MAX = ConstantSampler_ConstantDecision_ALWAYS_PARENT;
constexpr int ConstantSampler_ConstantDecision_ConstantDecision_ARRAYSIZE = ConstantSampler_ConstantDecision_ConstantDecision_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConstantSampler_ConstantDecision_descriptor();
template<typename T>
inline const std::string& ConstantSampler_ConstantDecision_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConstantSampler_ConstantDecision>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConstantSampler_ConstantDecision_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConstantSampler_ConstantDecision_descriptor(), enum_t_value);
}
inline bool ConstantSampler_ConstantDecision_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConstantSampler_ConstantDecision* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConstantSampler_ConstantDecision>(
    ConstantSampler_ConstantDecision_descriptor(), name, value);
}
// ===================================================================

class TraceConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.TraceConfig) */ {
 public:
  inline TraceConfig() : TraceConfig(nullptr) {}
  ~TraceConfig() override;
  explicit constexpr TraceConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceConfig(const TraceConfig& from);
  TraceConfig(TraceConfig&& from) noexcept
    : TraceConfig() {
    *this = ::std::move(from);
  }

  inline TraceConfig& operator=(const TraceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceConfig& operator=(TraceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceConfig& default_instance() {
    return *internal_default_instance();
  }
  enum SamplerCase {
    kConstantSampler = 1,
    kTraceIdRatioBased = 2,
    kRateLimitingSampler = 3,
    SAMPLER_NOT_SET = 0,
  };

  static inline const TraceConfig* internal_default_instance() {
    return reinterpret_cast<const TraceConfig*>(
               &_TraceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TraceConfig& a, TraceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TraceConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.trace.v1.TraceConfig";
  }
  protected:
  explicit TraceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxNumberOfAttributesFieldNumber = 4,
    kMaxNumberOfTimedEventsFieldNumber = 5,
    kMaxNumberOfAttributesPerTimedEventFieldNumber = 6,
    kMaxNumberOfLinksFieldNumber = 7,
    kMaxNumberOfAttributesPerLinkFieldNumber = 8,
    kConstantSamplerFieldNumber = 1,
    kTraceIdRatioBasedFieldNumber = 2,
    kRateLimitingSamplerFieldNumber = 3,
  };
  // int64 max_number_of_attributes = 4;
  void clear_max_number_of_attributes();
  int64_t max_number_of_attributes() const;
  void set_max_number_of_attributes(int64_t value);
  private:
  int64_t _internal_max_number_of_attributes() const;
  void _internal_set_max_number_of_attributes(int64_t value);
  public:

  // int64 max_number_of_timed_events = 5;
  void clear_max_number_of_timed_events();
  int64_t max_number_of_timed_events() const;
  void set_max_number_of_timed_events(int64_t value);
  private:
  int64_t _internal_max_number_of_timed_events() const;
  void _internal_set_max_number_of_timed_events(int64_t value);
  public:

  // int64 max_number_of_attributes_per_timed_event = 6;
  void clear_max_number_of_attributes_per_timed_event();
  int64_t max_number_of_attributes_per_timed_event() const;
  void set_max_number_of_attributes_per_timed_event(int64_t value);
  private:
  int64_t _internal_max_number_of_attributes_per_timed_event() const;
  void _internal_set_max_number_of_attributes_per_timed_event(int64_t value);
  public:

  // int64 max_number_of_links = 7;
  void clear_max_number_of_links();
  int64_t max_number_of_links() const;
  void set_max_number_of_links(int64_t value);
  private:
  int64_t _internal_max_number_of_links() const;
  void _internal_set_max_number_of_links(int64_t value);
  public:

  // int64 max_number_of_attributes_per_link = 8;
  void clear_max_number_of_attributes_per_link();
  int64_t max_number_of_attributes_per_link() const;
  void set_max_number_of_attributes_per_link(int64_t value);
  private:
  int64_t _internal_max_number_of_attributes_per_link() const;
  void _internal_set_max_number_of_attributes_per_link(int64_t value);
  public:

  // .opentelemetry.proto.trace.v1.ConstantSampler constant_sampler = 1;
  bool has_constant_sampler() const;
  private:
  bool _internal_has_constant_sampler() const;
  public:
  void clear_constant_sampler();
  const ::opentelemetry::proto::trace::v1::ConstantSampler& constant_sampler() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::trace::v1::ConstantSampler* release_constant_sampler();
  ::opentelemetry::proto::trace::v1::ConstantSampler* mutable_constant_sampler();
  void set_allocated_constant_sampler(::opentelemetry::proto::trace::v1::ConstantSampler* constant_sampler);
  private:
  const ::opentelemetry::proto::trace::v1::ConstantSampler& _internal_constant_sampler() const;
  ::opentelemetry::proto::trace::v1::ConstantSampler* _internal_mutable_constant_sampler();
  public:
  void unsafe_arena_set_allocated_constant_sampler(
      ::opentelemetry::proto::trace::v1::ConstantSampler* constant_sampler);
  ::opentelemetry::proto::trace::v1::ConstantSampler* unsafe_arena_release_constant_sampler();

  // .opentelemetry.proto.trace.v1.TraceIdRatioBased trace_id_ratio_based = 2;
  bool has_trace_id_ratio_based() const;
  private:
  bool _internal_has_trace_id_ratio_based() const;
  public:
  void clear_trace_id_ratio_based();
  const ::opentelemetry::proto::trace::v1::TraceIdRatioBased& trace_id_ratio_based() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::trace::v1::TraceIdRatioBased* release_trace_id_ratio_based();
  ::opentelemetry::proto::trace::v1::TraceIdRatioBased* mutable_trace_id_ratio_based();
  void set_allocated_trace_id_ratio_based(::opentelemetry::proto::trace::v1::TraceIdRatioBased* trace_id_ratio_based);
  private:
  const ::opentelemetry::proto::trace::v1::TraceIdRatioBased& _internal_trace_id_ratio_based() const;
  ::opentelemetry::proto::trace::v1::TraceIdRatioBased* _internal_mutable_trace_id_ratio_based();
  public:
  void unsafe_arena_set_allocated_trace_id_ratio_based(
      ::opentelemetry::proto::trace::v1::TraceIdRatioBased* trace_id_ratio_based);
  ::opentelemetry::proto::trace::v1::TraceIdRatioBased* unsafe_arena_release_trace_id_ratio_based();

  // .opentelemetry.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;
  bool has_rate_limiting_sampler() const;
  private:
  bool _internal_has_rate_limiting_sampler() const;
  public:
  void clear_rate_limiting_sampler();
  const ::opentelemetry::proto::trace::v1::RateLimitingSampler& rate_limiting_sampler() const;
  PROTOBUF_NODISCARD ::opentelemetry::proto::trace::v1::RateLimitingSampler* release_rate_limiting_sampler();
  ::opentelemetry::proto::trace::v1::RateLimitingSampler* mutable_rate_limiting_sampler();
  void set_allocated_rate_limiting_sampler(::opentelemetry::proto::trace::v1::RateLimitingSampler* rate_limiting_sampler);
  private:
  const ::opentelemetry::proto::trace::v1::RateLimitingSampler& _internal_rate_limiting_sampler() const;
  ::opentelemetry::proto::trace::v1::RateLimitingSampler* _internal_mutable_rate_limiting_sampler();
  public:
  void unsafe_arena_set_allocated_rate_limiting_sampler(
      ::opentelemetry::proto::trace::v1::RateLimitingSampler* rate_limiting_sampler);
  ::opentelemetry::proto::trace::v1::RateLimitingSampler* unsafe_arena_release_rate_limiting_sampler();

  void clear_sampler();
  SamplerCase sampler_case() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.TraceConfig)
 private:
  class _Internal;
  void set_has_constant_sampler();
  void set_has_trace_id_ratio_based();
  void set_has_rate_limiting_sampler();

  inline bool has_sampler() const;
  inline void clear_has_sampler();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t max_number_of_attributes_;
  int64_t max_number_of_timed_events_;
  int64_t max_number_of_attributes_per_timed_event_;
  int64_t max_number_of_links_;
  int64_t max_number_of_attributes_per_link_;
  union SamplerUnion {
    constexpr SamplerUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::opentelemetry::proto::trace::v1::ConstantSampler* constant_sampler_;
    ::opentelemetry::proto::trace::v1::TraceIdRatioBased* trace_id_ratio_based_;
    ::opentelemetry::proto::trace::v1::RateLimitingSampler* rate_limiting_sampler_;
  } sampler_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ConstantSampler final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.ConstantSampler) */ {
 public:
  inline ConstantSampler() : ConstantSampler(nullptr) {}
  ~ConstantSampler() override;
  explicit constexpr ConstantSampler(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConstantSampler(const ConstantSampler& from);
  ConstantSampler(ConstantSampler&& from) noexcept
    : ConstantSampler() {
    *this = ::std::move(from);
  }

  inline ConstantSampler& operator=(const ConstantSampler& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstantSampler& operator=(ConstantSampler&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConstantSampler& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConstantSampler* internal_default_instance() {
    return reinterpret_cast<const ConstantSampler*>(
               &_ConstantSampler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConstantSampler& a, ConstantSampler& b) {
    a.Swap(&b);
  }
  inline void Swap(ConstantSampler* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConstantSampler* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConstantSampler* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConstantSampler>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConstantSampler& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConstantSampler& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstantSampler* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.trace.v1.ConstantSampler";
  }
  protected:
  explicit ConstantSampler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConstantSampler_ConstantDecision ConstantDecision;
  static constexpr ConstantDecision ALWAYS_OFF =
    ConstantSampler_ConstantDecision_ALWAYS_OFF;
  static constexpr ConstantDecision ALWAYS_ON =
    ConstantSampler_ConstantDecision_ALWAYS_ON;
  static constexpr ConstantDecision ALWAYS_PARENT =
    ConstantSampler_ConstantDecision_ALWAYS_PARENT;
  static inline bool ConstantDecision_IsValid(int value) {
    return ConstantSampler_ConstantDecision_IsValid(value);
  }
  static constexpr ConstantDecision ConstantDecision_MIN =
    ConstantSampler_ConstantDecision_ConstantDecision_MIN;
  static constexpr ConstantDecision ConstantDecision_MAX =
    ConstantSampler_ConstantDecision_ConstantDecision_MAX;
  static constexpr int ConstantDecision_ARRAYSIZE =
    ConstantSampler_ConstantDecision_ConstantDecision_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConstantDecision_descriptor() {
    return ConstantSampler_ConstantDecision_descriptor();
  }
  template<typename T>
  static inline const std::string& ConstantDecision_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConstantDecision>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConstantDecision_Name.");
    return ConstantSampler_ConstantDecision_Name(enum_t_value);
  }
  static inline bool ConstantDecision_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ConstantDecision* value) {
    return ConstantSampler_ConstantDecision_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDecisionFieldNumber = 1,
  };
  // .opentelemetry.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;
  void clear_decision();
  ::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision decision() const;
  void set_decision(::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision value);
  private:
  ::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision _internal_decision() const;
  void _internal_set_decision(::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.ConstantSampler)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int decision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TraceIdRatioBased final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.TraceIdRatioBased) */ {
 public:
  inline TraceIdRatioBased() : TraceIdRatioBased(nullptr) {}
  ~TraceIdRatioBased() override;
  explicit constexpr TraceIdRatioBased(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceIdRatioBased(const TraceIdRatioBased& from);
  TraceIdRatioBased(TraceIdRatioBased&& from) noexcept
    : TraceIdRatioBased() {
    *this = ::std::move(from);
  }

  inline TraceIdRatioBased& operator=(const TraceIdRatioBased& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceIdRatioBased& operator=(TraceIdRatioBased&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceIdRatioBased& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceIdRatioBased* internal_default_instance() {
    return reinterpret_cast<const TraceIdRatioBased*>(
               &_TraceIdRatioBased_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TraceIdRatioBased& a, TraceIdRatioBased& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceIdRatioBased* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceIdRatioBased* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceIdRatioBased* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceIdRatioBased>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceIdRatioBased& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TraceIdRatioBased& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceIdRatioBased* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.trace.v1.TraceIdRatioBased";
  }
  protected:
  explicit TraceIdRatioBased(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplingRatioFieldNumber = 1,
  };
  // double samplingRatio = 1;
  void clear_samplingratio();
  double samplingratio() const;
  void set_samplingratio(double value);
  private:
  double _internal_samplingratio() const;
  void _internal_set_samplingratio(double value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.TraceIdRatioBased)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double samplingratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RateLimitingSampler final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.RateLimitingSampler) */ {
 public:
  inline RateLimitingSampler() : RateLimitingSampler(nullptr) {}
  ~RateLimitingSampler() override;
  explicit constexpr RateLimitingSampler(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RateLimitingSampler(const RateLimitingSampler& from);
  RateLimitingSampler(RateLimitingSampler&& from) noexcept
    : RateLimitingSampler() {
    *this = ::std::move(from);
  }

  inline RateLimitingSampler& operator=(const RateLimitingSampler& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateLimitingSampler& operator=(RateLimitingSampler&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RateLimitingSampler& default_instance() {
    return *internal_default_instance();
  }
  static inline const RateLimitingSampler* internal_default_instance() {
    return reinterpret_cast<const RateLimitingSampler*>(
               &_RateLimitingSampler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RateLimitingSampler& a, RateLimitingSampler& b) {
    a.Swap(&b);
  }
  inline void Swap(RateLimitingSampler* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateLimitingSampler* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RateLimitingSampler* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RateLimitingSampler>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RateLimitingSampler& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RateLimitingSampler& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateLimitingSampler* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.trace.v1.RateLimitingSampler";
  }
  protected:
  explicit RateLimitingSampler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQpsFieldNumber = 1,
  };
  // int64 qps = 1;
  void clear_qps();
  int64_t qps() const;
  void set_qps(int64_t value);
  private:
  int64_t _internal_qps() const;
  void _internal_set_qps(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.RateLimitingSampler)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t qps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TraceConfig

// .opentelemetry.proto.trace.v1.ConstantSampler constant_sampler = 1;
inline bool TraceConfig::_internal_has_constant_sampler() const {
  return sampler_case() == kConstantSampler;
}
inline bool TraceConfig::has_constant_sampler() const {
  return _internal_has_constant_sampler();
}
inline void TraceConfig::set_has_constant_sampler() {
  _oneof_case_[0] = kConstantSampler;
}
inline void TraceConfig::clear_constant_sampler() {
  if (_internal_has_constant_sampler()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sampler_.constant_sampler_;
    }
    clear_has_sampler();
  }
}
inline ::opentelemetry::proto::trace::v1::ConstantSampler* TraceConfig::release_constant_sampler() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.TraceConfig.constant_sampler)
  if (_internal_has_constant_sampler()) {
    clear_has_sampler();
      ::opentelemetry::proto::trace::v1::ConstantSampler* temp = sampler_.constant_sampler_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sampler_.constant_sampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::trace::v1::ConstantSampler& TraceConfig::_internal_constant_sampler() const {
  return _internal_has_constant_sampler()
      ? *sampler_.constant_sampler_
      : reinterpret_cast< ::opentelemetry::proto::trace::v1::ConstantSampler&>(::opentelemetry::proto::trace::v1::_ConstantSampler_default_instance_);
}
inline const ::opentelemetry::proto::trace::v1::ConstantSampler& TraceConfig::constant_sampler() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.TraceConfig.constant_sampler)
  return _internal_constant_sampler();
}
inline ::opentelemetry::proto::trace::v1::ConstantSampler* TraceConfig::unsafe_arena_release_constant_sampler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.trace.v1.TraceConfig.constant_sampler)
  if (_internal_has_constant_sampler()) {
    clear_has_sampler();
    ::opentelemetry::proto::trace::v1::ConstantSampler* temp = sampler_.constant_sampler_;
    sampler_.constant_sampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TraceConfig::unsafe_arena_set_allocated_constant_sampler(::opentelemetry::proto::trace::v1::ConstantSampler* constant_sampler) {
  clear_sampler();
  if (constant_sampler) {
    set_has_constant_sampler();
    sampler_.constant_sampler_ = constant_sampler;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.trace.v1.TraceConfig.constant_sampler)
}
inline ::opentelemetry::proto::trace::v1::ConstantSampler* TraceConfig::_internal_mutable_constant_sampler() {
  if (!_internal_has_constant_sampler()) {
    clear_sampler();
    set_has_constant_sampler();
    sampler_.constant_sampler_ = CreateMaybeMessage< ::opentelemetry::proto::trace::v1::ConstantSampler >(GetArenaForAllocation());
  }
  return sampler_.constant_sampler_;
}
inline ::opentelemetry::proto::trace::v1::ConstantSampler* TraceConfig::mutable_constant_sampler() {
  ::opentelemetry::proto::trace::v1::ConstantSampler* _msg = _internal_mutable_constant_sampler();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.TraceConfig.constant_sampler)
  return _msg;
}

// .opentelemetry.proto.trace.v1.TraceIdRatioBased trace_id_ratio_based = 2;
inline bool TraceConfig::_internal_has_trace_id_ratio_based() const {
  return sampler_case() == kTraceIdRatioBased;
}
inline bool TraceConfig::has_trace_id_ratio_based() const {
  return _internal_has_trace_id_ratio_based();
}
inline void TraceConfig::set_has_trace_id_ratio_based() {
  _oneof_case_[0] = kTraceIdRatioBased;
}
inline void TraceConfig::clear_trace_id_ratio_based() {
  if (_internal_has_trace_id_ratio_based()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sampler_.trace_id_ratio_based_;
    }
    clear_has_sampler();
  }
}
inline ::opentelemetry::proto::trace::v1::TraceIdRatioBased* TraceConfig::release_trace_id_ratio_based() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.TraceConfig.trace_id_ratio_based)
  if (_internal_has_trace_id_ratio_based()) {
    clear_has_sampler();
      ::opentelemetry::proto::trace::v1::TraceIdRatioBased* temp = sampler_.trace_id_ratio_based_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sampler_.trace_id_ratio_based_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::trace::v1::TraceIdRatioBased& TraceConfig::_internal_trace_id_ratio_based() const {
  return _internal_has_trace_id_ratio_based()
      ? *sampler_.trace_id_ratio_based_
      : reinterpret_cast< ::opentelemetry::proto::trace::v1::TraceIdRatioBased&>(::opentelemetry::proto::trace::v1::_TraceIdRatioBased_default_instance_);
}
inline const ::opentelemetry::proto::trace::v1::TraceIdRatioBased& TraceConfig::trace_id_ratio_based() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.TraceConfig.trace_id_ratio_based)
  return _internal_trace_id_ratio_based();
}
inline ::opentelemetry::proto::trace::v1::TraceIdRatioBased* TraceConfig::unsafe_arena_release_trace_id_ratio_based() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.trace.v1.TraceConfig.trace_id_ratio_based)
  if (_internal_has_trace_id_ratio_based()) {
    clear_has_sampler();
    ::opentelemetry::proto::trace::v1::TraceIdRatioBased* temp = sampler_.trace_id_ratio_based_;
    sampler_.trace_id_ratio_based_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TraceConfig::unsafe_arena_set_allocated_trace_id_ratio_based(::opentelemetry::proto::trace::v1::TraceIdRatioBased* trace_id_ratio_based) {
  clear_sampler();
  if (trace_id_ratio_based) {
    set_has_trace_id_ratio_based();
    sampler_.trace_id_ratio_based_ = trace_id_ratio_based;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.trace.v1.TraceConfig.trace_id_ratio_based)
}
inline ::opentelemetry::proto::trace::v1::TraceIdRatioBased* TraceConfig::_internal_mutable_trace_id_ratio_based() {
  if (!_internal_has_trace_id_ratio_based()) {
    clear_sampler();
    set_has_trace_id_ratio_based();
    sampler_.trace_id_ratio_based_ = CreateMaybeMessage< ::opentelemetry::proto::trace::v1::TraceIdRatioBased >(GetArenaForAllocation());
  }
  return sampler_.trace_id_ratio_based_;
}
inline ::opentelemetry::proto::trace::v1::TraceIdRatioBased* TraceConfig::mutable_trace_id_ratio_based() {
  ::opentelemetry::proto::trace::v1::TraceIdRatioBased* _msg = _internal_mutable_trace_id_ratio_based();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.TraceConfig.trace_id_ratio_based)
  return _msg;
}

// .opentelemetry.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;
inline bool TraceConfig::_internal_has_rate_limiting_sampler() const {
  return sampler_case() == kRateLimitingSampler;
}
inline bool TraceConfig::has_rate_limiting_sampler() const {
  return _internal_has_rate_limiting_sampler();
}
inline void TraceConfig::set_has_rate_limiting_sampler() {
  _oneof_case_[0] = kRateLimitingSampler;
}
inline void TraceConfig::clear_rate_limiting_sampler() {
  if (_internal_has_rate_limiting_sampler()) {
    if (GetArenaForAllocation() == nullptr) {
      delete sampler_.rate_limiting_sampler_;
    }
    clear_has_sampler();
  }
}
inline ::opentelemetry::proto::trace::v1::RateLimitingSampler* TraceConfig::release_rate_limiting_sampler() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.TraceConfig.rate_limiting_sampler)
  if (_internal_has_rate_limiting_sampler()) {
    clear_has_sampler();
      ::opentelemetry::proto::trace::v1::RateLimitingSampler* temp = sampler_.rate_limiting_sampler_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    sampler_.rate_limiting_sampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::trace::v1::RateLimitingSampler& TraceConfig::_internal_rate_limiting_sampler() const {
  return _internal_has_rate_limiting_sampler()
      ? *sampler_.rate_limiting_sampler_
      : reinterpret_cast< ::opentelemetry::proto::trace::v1::RateLimitingSampler&>(::opentelemetry::proto::trace::v1::_RateLimitingSampler_default_instance_);
}
inline const ::opentelemetry::proto::trace::v1::RateLimitingSampler& TraceConfig::rate_limiting_sampler() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.TraceConfig.rate_limiting_sampler)
  return _internal_rate_limiting_sampler();
}
inline ::opentelemetry::proto::trace::v1::RateLimitingSampler* TraceConfig::unsafe_arena_release_rate_limiting_sampler() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.trace.v1.TraceConfig.rate_limiting_sampler)
  if (_internal_has_rate_limiting_sampler()) {
    clear_has_sampler();
    ::opentelemetry::proto::trace::v1::RateLimitingSampler* temp = sampler_.rate_limiting_sampler_;
    sampler_.rate_limiting_sampler_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TraceConfig::unsafe_arena_set_allocated_rate_limiting_sampler(::opentelemetry::proto::trace::v1::RateLimitingSampler* rate_limiting_sampler) {
  clear_sampler();
  if (rate_limiting_sampler) {
    set_has_rate_limiting_sampler();
    sampler_.rate_limiting_sampler_ = rate_limiting_sampler;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.trace.v1.TraceConfig.rate_limiting_sampler)
}
inline ::opentelemetry::proto::trace::v1::RateLimitingSampler* TraceConfig::_internal_mutable_rate_limiting_sampler() {
  if (!_internal_has_rate_limiting_sampler()) {
    clear_sampler();
    set_has_rate_limiting_sampler();
    sampler_.rate_limiting_sampler_ = CreateMaybeMessage< ::opentelemetry::proto::trace::v1::RateLimitingSampler >(GetArenaForAllocation());
  }
  return sampler_.rate_limiting_sampler_;
}
inline ::opentelemetry::proto::trace::v1::RateLimitingSampler* TraceConfig::mutable_rate_limiting_sampler() {
  ::opentelemetry::proto::trace::v1::RateLimitingSampler* _msg = _internal_mutable_rate_limiting_sampler();
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.TraceConfig.rate_limiting_sampler)
  return _msg;
}

// int64 max_number_of_attributes = 4;
inline void TraceConfig::clear_max_number_of_attributes() {
  max_number_of_attributes_ = int64_t{0};
}
inline int64_t TraceConfig::_internal_max_number_of_attributes() const {
  return max_number_of_attributes_;
}
inline int64_t TraceConfig::max_number_of_attributes() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.TraceConfig.max_number_of_attributes)
  return _internal_max_number_of_attributes();
}
inline void TraceConfig::_internal_set_max_number_of_attributes(int64_t value) {
  
  max_number_of_attributes_ = value;
}
inline void TraceConfig::set_max_number_of_attributes(int64_t value) {
  _internal_set_max_number_of_attributes(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.TraceConfig.max_number_of_attributes)
}

// int64 max_number_of_timed_events = 5;
inline void TraceConfig::clear_max_number_of_timed_events() {
  max_number_of_timed_events_ = int64_t{0};
}
inline int64_t TraceConfig::_internal_max_number_of_timed_events() const {
  return max_number_of_timed_events_;
}
inline int64_t TraceConfig::max_number_of_timed_events() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.TraceConfig.max_number_of_timed_events)
  return _internal_max_number_of_timed_events();
}
inline void TraceConfig::_internal_set_max_number_of_timed_events(int64_t value) {
  
  max_number_of_timed_events_ = value;
}
inline void TraceConfig::set_max_number_of_timed_events(int64_t value) {
  _internal_set_max_number_of_timed_events(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.TraceConfig.max_number_of_timed_events)
}

// int64 max_number_of_attributes_per_timed_event = 6;
inline void TraceConfig::clear_max_number_of_attributes_per_timed_event() {
  max_number_of_attributes_per_timed_event_ = int64_t{0};
}
inline int64_t TraceConfig::_internal_max_number_of_attributes_per_timed_event() const {
  return max_number_of_attributes_per_timed_event_;
}
inline int64_t TraceConfig::max_number_of_attributes_per_timed_event() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.TraceConfig.max_number_of_attributes_per_timed_event)
  return _internal_max_number_of_attributes_per_timed_event();
}
inline void TraceConfig::_internal_set_max_number_of_attributes_per_timed_event(int64_t value) {
  
  max_number_of_attributes_per_timed_event_ = value;
}
inline void TraceConfig::set_max_number_of_attributes_per_timed_event(int64_t value) {
  _internal_set_max_number_of_attributes_per_timed_event(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.TraceConfig.max_number_of_attributes_per_timed_event)
}

// int64 max_number_of_links = 7;
inline void TraceConfig::clear_max_number_of_links() {
  max_number_of_links_ = int64_t{0};
}
inline int64_t TraceConfig::_internal_max_number_of_links() const {
  return max_number_of_links_;
}
inline int64_t TraceConfig::max_number_of_links() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.TraceConfig.max_number_of_links)
  return _internal_max_number_of_links();
}
inline void TraceConfig::_internal_set_max_number_of_links(int64_t value) {
  
  max_number_of_links_ = value;
}
inline void TraceConfig::set_max_number_of_links(int64_t value) {
  _internal_set_max_number_of_links(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.TraceConfig.max_number_of_links)
}

// int64 max_number_of_attributes_per_link = 8;
inline void TraceConfig::clear_max_number_of_attributes_per_link() {
  max_number_of_attributes_per_link_ = int64_t{0};
}
inline int64_t TraceConfig::_internal_max_number_of_attributes_per_link() const {
  return max_number_of_attributes_per_link_;
}
inline int64_t TraceConfig::max_number_of_attributes_per_link() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.TraceConfig.max_number_of_attributes_per_link)
  return _internal_max_number_of_attributes_per_link();
}
inline void TraceConfig::_internal_set_max_number_of_attributes_per_link(int64_t value) {
  
  max_number_of_attributes_per_link_ = value;
}
inline void TraceConfig::set_max_number_of_attributes_per_link(int64_t value) {
  _internal_set_max_number_of_attributes_per_link(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.TraceConfig.max_number_of_attributes_per_link)
}

inline bool TraceConfig::has_sampler() const {
  return sampler_case() != SAMPLER_NOT_SET;
}
inline void TraceConfig::clear_has_sampler() {
  _oneof_case_[0] = SAMPLER_NOT_SET;
}
inline TraceConfig::SamplerCase TraceConfig::sampler_case() const {
  return TraceConfig::SamplerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConstantSampler

// .opentelemetry.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;
inline void ConstantSampler::clear_decision() {
  decision_ = 0;
}
inline ::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision ConstantSampler::_internal_decision() const {
  return static_cast< ::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision >(decision_);
}
inline ::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision ConstantSampler::decision() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.ConstantSampler.decision)
  return _internal_decision();
}
inline void ConstantSampler::_internal_set_decision(::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision value) {
  
  decision_ = value;
}
inline void ConstantSampler::set_decision(::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision value) {
  _internal_set_decision(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.ConstantSampler.decision)
}

// -------------------------------------------------------------------

// TraceIdRatioBased

// double samplingRatio = 1;
inline void TraceIdRatioBased::clear_samplingratio() {
  samplingratio_ = 0;
}
inline double TraceIdRatioBased::_internal_samplingratio() const {
  return samplingratio_;
}
inline double TraceIdRatioBased::samplingratio() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.TraceIdRatioBased.samplingRatio)
  return _internal_samplingratio();
}
inline void TraceIdRatioBased::_internal_set_samplingratio(double value) {
  
  samplingratio_ = value;
}
inline void TraceIdRatioBased::set_samplingratio(double value) {
  _internal_set_samplingratio(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.TraceIdRatioBased.samplingRatio)
}

// -------------------------------------------------------------------

// RateLimitingSampler

// int64 qps = 1;
inline void RateLimitingSampler::clear_qps() {
  qps_ = int64_t{0};
}
inline int64_t RateLimitingSampler::_internal_qps() const {
  return qps_;
}
inline int64_t RateLimitingSampler::qps() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.RateLimitingSampler.qps)
  return _internal_qps();
}
inline void RateLimitingSampler::_internal_set_qps(int64_t value) {
  
  qps_ = value;
}
inline void RateLimitingSampler::set_qps(int64_t value) {
  _internal_set_qps(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.RateLimitingSampler.qps)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opentelemetry

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision>() {
  return ::opentelemetry::proto::trace::v1::ConstantSampler_ConstantDecision_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_5fconfig_2eproto
