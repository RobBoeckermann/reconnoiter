// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/collector/logs/v1/logs_service.proto

#include "opentelemetry/proto/collector/logs/v1/logs_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace opentelemetry {
namespace proto {
namespace collector {
namespace logs {
namespace v1 {
constexpr ExportLogsServiceRequest::ExportLogsServiceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resource_logs_(){}
struct ExportLogsServiceRequestDefaultTypeInternal {
  constexpr ExportLogsServiceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExportLogsServiceRequestDefaultTypeInternal() {}
  union {
    ExportLogsServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExportLogsServiceRequestDefaultTypeInternal _ExportLogsServiceRequest_default_instance_;
constexpr ExportLogsServiceResponse::ExportLogsServiceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ExportLogsServiceResponseDefaultTypeInternal {
  constexpr ExportLogsServiceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExportLogsServiceResponseDefaultTypeInternal() {}
  union {
    ExportLogsServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExportLogsServiceResponseDefaultTypeInternal _ExportLogsServiceResponse_default_instance_;
}  // namespace v1
}  // namespace logs
}  // namespace collector
}  // namespace proto
}  // namespace opentelemetry
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto = nullptr;

const uint32_t TableStruct_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest, resource_logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest)},
  { 7, -1, -1, sizeof(::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::collector::logs::v1::_ExportLogsServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::collector::logs::v1::_ExportLogsServiceResponse_default_instance_),
};

const char descriptor_table_protodef_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8opentelemetry/proto/collector/logs/v1/"
  "logs_service.proto\022%opentelemetry.proto."
  "collector.logs.v1\032&opentelemetry/proto/l"
  "ogs/v1/logs.proto\"\\\n\030ExportLogsServiceRe"
  "quest\022@\n\rresource_logs\030\001 \003(\0132).opentelem"
  "etry.proto.logs.v1.ResourceLogs\"\033\n\031Expor"
  "tLogsServiceResponse2\235\001\n\013LogsService\022\215\001\n"
  "\006Export\022\?.opentelemetry.proto.collector."
  "logs.v1.ExportLogsServiceRequest\032@.opent"
  "elemetry.proto.collector.logs.v1.ExportL"
  "ogsServiceResponse\"\000Bp\n(io.opentelemetry"
  ".proto.collector.logs.v1B\020LogsServicePro"
  "toP\001Z0go.opentelemetry.io/proto/otlp/col"
  "lector/logs/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_deps[1] = {
  &::descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto = {
  false, false, 542, descriptor_table_protodef_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto, "opentelemetry/proto/collector/logs/v1/logs_service.proto", 
  &descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_once, descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto::offsets,
  file_level_metadata_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto, file_level_enum_descriptors_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto, file_level_service_descriptors_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_getter() {
  return &descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto(&descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto);
namespace opentelemetry {
namespace proto {
namespace collector {
namespace logs {
namespace v1 {

// ===================================================================

class ExportLogsServiceRequest::_Internal {
 public:
};

void ExportLogsServiceRequest::clear_resource_logs() {
  resource_logs_.Clear();
}
ExportLogsServiceRequest::ExportLogsServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resource_logs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
}
ExportLogsServiceRequest::ExportLogsServiceRequest(const ExportLogsServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_logs_(from.resource_logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
}

inline void ExportLogsServiceRequest::SharedCtor() {
}

ExportLogsServiceRequest::~ExportLogsServiceRequest() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExportLogsServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExportLogsServiceRequest::ArenaDtor(void* object) {
  ExportLogsServiceRequest* _this = reinterpret_cast< ExportLogsServiceRequest* >(object);
  (void)_this;
}
void ExportLogsServiceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExportLogsServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExportLogsServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_logs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportLogsServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExportLogsServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_resource_logs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  return target;
}

size_t ExportLogsServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
  total_size += 1UL * this->_internal_resource_logs_size();
  for (const auto& msg : this->resource_logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExportLogsServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExportLogsServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExportLogsServiceRequest::GetClassData() const { return &_class_data_; }

void ExportLogsServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExportLogsServiceRequest *>(to)->MergeFrom(
      static_cast<const ExportLogsServiceRequest &>(from));
}


void ExportLogsServiceRequest::MergeFrom(const ExportLogsServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  resource_logs_.MergeFrom(from.resource_logs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExportLogsServiceRequest::CopyFrom(const ExportLogsServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportLogsServiceRequest::IsInitialized() const {
  return true;
}

void ExportLogsServiceRequest::InternalSwap(ExportLogsServiceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resource_logs_.InternalSwap(&other->resource_logs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportLogsServiceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto[0]);
}

// ===================================================================

class ExportLogsServiceResponse::_Internal {
 public:
};

ExportLogsServiceResponse::ExportLogsServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
}
ExportLogsServiceResponse::ExportLogsServiceResponse(const ExportLogsServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExportLogsServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExportLogsServiceResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ExportLogsServiceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_getter, &descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_once,
      file_level_metadata_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace logs
}  // namespace collector
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest* Arena::CreateMaybeMessage< ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse* Arena::CreateMaybeMessage< ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
